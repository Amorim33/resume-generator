"""
The query root of GraphQL schema.
"""
type Query {
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID
  ): Node

  """
  User that is currently logged in.
  """
  me: User

  resumes(
    """
    Returns the resumes in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n resumes from the list.
    """
    first: Int

    """
    Returns the resumes in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n resumes from the list.
    """
    last: Int
  ): ResumeConnection
}

"""
The mutation root of GraphQL schema.
"""
type Mutation {
  """
  Creates a new user, or updates an existing one.
  """
  UserUpsert(input: UserUpsertInput!): UserUpsertPayload

  """
  Generates a resume for the user.
  """
  ResumeGenerate(input: ResumeGenerateInput!): ResumeGeneratePayload
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
The user object type
"""
type User implements Node {
  """
  The id of the user
  """
  id: ID!

  """
  The name of the user
  """
  name: String!

  """
  The email of the user
  """
  email: String!

  """
  The preferred contact of the user
  """
  contact: String!

  """
  The self description of the user
  """
  about: String!
}

"""
The resume object type
"""
type Resume implements Node {
  """
  The id of the resume
  """
  id: ID!

  """
  The generated resume in HTML format
  """
  html: String!
}

"""
The resume edge in a connection.
"""
type ResumeEdge {
  """
  The resume at the end of the edge
  """
  node: Resume!

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
A connection to a list of resumes.
"""
type ResumeConnection {
  """
  A count of the total number of resumes in this connection, ignoring pagination.
  """
  count: Int!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfoExtended!

  """
  A list of edges.
  """
  edges: [ResumeEdge]!
}

type UserUpsertPayload {
  """
  Possible mutation errors.
  """
  errors: [Error!]

  """
  User that is currently in the context.
  """
  me: User
}

input UserInput {
  """
  The name of the user
  """
  name: String!

  """
  The email of the user
  """
  email: String!

  """
  The preferred contact of the user
  """
  contact: String!

  """
  The self description of the user
  """
  about: String!
}

input UserUpsertInput {
  """
  The user data.
  """
  user: UserInput!
}

type ResumeGeneratePayload {
  """
  Possible mutation errors.
  """
  errors: [Error!]

  """
  Generated resume.
  """
  resume: Resume
}

input ResumeGenerateInput {
  """
  The user professional experience.
  """
  experience: String!

  """
  The user education background.
  """
  education: String!

  """
  The user professional goals
  """
  goals: String

  """
  The user skills
  """
  skills: String

  """
  The user languages
  """
  languages: String

  """
  The user projects
  """
  projects: String

  """
  The user certifications
  """
  certifications: String
}

"""
Represents a detailed error. The information is used to display a user-friendly error message.
"""
type Error {
  """
  Error code. e.g. "USER_NOT_FOUND"
  """
  code: String!

  """
  Error title. e.g. "User not found"
  """
  title: String!

  """
  Error details. e.g. "User with id 123 not found"
  """
  details: String
}

"""
Information about pagination in a connection.
"""
type PageInfoExtended {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}
